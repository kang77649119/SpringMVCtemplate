<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
	http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">

	<!--
		web.xml加载顺序如下：
		context-param -> listener-> filter -> servlet

		context-param中加载配置文件applicationContext.xml，即使这个文件中什么都不配置也要去加载否则初始化spring失败

		spring-mvc.xml中这行代码<context:component-scan base-package="com.project.springmvc" />
		表示扫描包内的bean，自动装配(controller层和service层)

		在spring-mybatis.xml中
		<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
			<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
			<property name="basePackage" value="com.project.springmvc.web.modules.test.dao"/>
			<property name="annotationClass" value="com.project.springmvc.common.annotation.MyBatisDao"/>
    	</bean>
    	表示扫描包内的dao层

    	在web.xml中先执行了context-param加载了applicationContext.xml和spring-mybatis.xml
    	再去加载springmvc这个<servlet>配置，spring-mvc.xml中扫描了controller和service
    	这样就保证了每一层的注入不会出现为null的情况，在写注解的时候可以只写@Autowired
    	就不需要写 @Autowired(required = false) ps：required = false 表示为null时，重新注入一个新的bean

	-->

    <!-- 配置web.xml，使其具有springmvc特性，主要配置两处，一个是ContextLoaderListener，一个是DispatcherServlet -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			classpath*:applicationContext.xml,
			classpath:spring-mybatis.xml
		</param-value>
	</context-param>

	<!-- 配置ContextLoaderListener表示，该工程要以spring的方式启动。启动时会默认在/WEB-INF目录下查找applicationContext.xml作为spring容器的配置文件，该文件里可以初始化一些bean -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- 防止Spring内存溢出监听器 -->
	<listener>
		<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener>

	<!-- 字符集过滤器 -->  
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- spring mvc 配置 -->
	<!-- 配置DispatcherServlet表示，该工程将采用springmvc的方式。启动时也会默认在/WEB-INF目录下查找XXX-servlet.xml作为配置文件，
		XXX就是DispatcherServlet的名字，该文件中将配置两项重要的mvc特性：HandlerMapping,负责为DispatcherServlet这个前端控制器的请求查找Controller；
		ViewResolver,负责为DispatcherServlet查找ModelAndView的视图解析器。
		此处使用指定的配置文件spring-mvc.xml -->
	<servlet>
		<servlet-name>springmvc</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>  
            <param-name>contextConfigLocation</param-name>  
            <param-value>classpath*:/spring-mvc.xml</param-value>
        </init-param>  
        <load-on-startup>1</load-on-startup>  
	</servlet>

	<servlet-mapping>
		<servlet-name>springmvc</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	
	<welcome-file-list>  
        <welcome-file>index.jsp</welcome-file>  
    </welcome-file-list>

</web-app>